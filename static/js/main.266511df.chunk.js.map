{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactsList/ContactsList.module.css","components/Modal/Modal.module.css","components/Filter/Filter.module.css","components/Section/Section.module.css","components/Container/Container.module.css","components/Button/Button.module.css","components/Title/Title.module.css","App.module.css","components/Container/Container.js","contacts-api.js","redux/operations.js","redux/selectors.js","redux/modalSlice.js","components/Button/Button.js","components/ContactForm/ContactForm.js","components/ContactsList/ContactsList.js","redux/filterSlice.js","components/Filter/Filter.js","components/Title/Title.js","components/Section/Section.js","components/Modal/Modal.js","App.js","redux/contactsSlice.js","redux/store.js","index.js"],"names":["module","exports","Container","children","className","s","container","Propypes","PropTypes","node","axios","defaults","baseURL","addNewContact","contact","post","then","data","deleteContacts","contactId","delete","fetchContacts","createAsyncThunk","thunkAPI","get","response","rejectWithValue","message","addContact","deleteContact","responce","id","getContacts","state","contacts","items","getFilter","filter","getModal","modal","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","modalSlice","createSlice","initialState","reducers","toggleModal","_","action","payload","actions","Button","text","onClick","type","useSelector","useDispatch","ropTypes","string","isRequired","func","ContactForm","useState","setName","number","setNumber","allContacts","showModal","dispatch","handleChange","event","currentTarget","value","hendleSubmit","preventDefault","checkName","alert","reset","newName","find","form","onSubmit","label","input","onChange","pattern","title","required","ContactList","status","useEffect","contactsWrapper","length","contactList","map","item","filterSlice","changeFilter","Filter","e","target","Title","Section","section","modalRoot","document","querySelector","Modal","disputch","window","addEventListener","eskKeyDown","removeEventListener","evt","code","createPortal","backdrop","content","btnClose","App","showModall","contactSlice","error","extraReducers","builder","addCase","pending","fulfilled","concat","rejected","push","configureStore","reducer","contactReducer","filterReducer","modalReducer","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,2BAA2B,MAAQ,6B,mBCA9FD,EAAOC,QAAU,CAAC,YAAc,kCAAkC,KAAO,2BAA2B,OAAS,+B,mBCA7GD,EAAOC,QAAU,CAAC,SAAW,wBAAwB,QAAU,uBAAuB,SAAW,0B,mBCAjGD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,mBCA1DD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,4CAA4C,OAAS,8C,mBCAhHD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,wCAAwC,OAAS,2C,mBCAxGD,EAAOC,QAAU,CAAC,SAAW,wB,+ICG7B,SAASC,EAAU,GAAe,IAAbC,EAAQ,EAARA,SACnB,OAAO,qBAAKC,UAAWC,IAAEC,UAAU,SAAEH,IAGvCD,EAAUK,SAAW,CACnBJ,SAAUK,IAAUC,MAGPP,Q,wDCTfQ,IAAMC,SAASC,QAAU,8CAElB,IAIMC,EAAgB,SAACC,GAC5B,OAAOJ,IAAMK,KAAK,YAAaD,GAASE,MAAK,YAAO,SAAJC,SAGrCC,EAAiB,SAACC,GAC7B,OAAOT,IAAMU,OAAO,aAAD,OAAcD,KCPtBE,EAAgBC,YAC3B,yBAAwB,uCACxB,WAAOC,GAAQ,gGDHRb,IAAMc,IAAI,aAAaR,MAAK,SAACS,GAAQ,OAAKA,EAASR,QCKZ,KAAD,EAA3B,OAARQ,EAAQ,yBACPA,GAAQ,yDAERF,EAASG,gBAAgB,KAAMC,UAAQ,yDAEjD,mDARuB,IAWbC,EAAaN,YACxB,sBAAqB,uCACrB,WAAOR,EAASS,GAAQ,gGAEGV,EAAcC,GAAS,KAAD,EAA/B,OAARW,EAAQ,yBACPA,GAAQ,yDAERF,EAASG,gBAAgB,KAAMC,UAAQ,yDAEjD,qDARoB,IAWVE,EAAgBP,YAC3B,yBAAwB,uCACxB,WAAOH,EAAWI,GAAQ,gGAECL,EAAeC,GAAW,KAAD,EAAlC,OAARW,EAAQ,yBACPA,EAASb,KAAKc,IAAE,yDAEhBR,EAASG,gBAAgB,KAAMC,UAAQ,yDAEjD,qDARuB,I,QC9BbK,EAAc,SAACC,GAAK,OAAKA,EAAMC,SAASC,OACxCC,EAAY,SAACH,GAAK,OAAKA,EAAMI,QAC7BC,EAAW,SAACL,GAAK,OAAKA,EAAMM,OAU5BC,EAAqBC,YAChC,CAACT,EAAaI,IACd,SAACF,EAAUG,GACT,IAAMK,EAAmBL,EAAOM,cAChC,OAAOT,EAASG,QAAO,SAACvB,GAAO,OAC7BA,EAAQ8B,KAAKD,cAAcE,SAASH,SChBpCI,EAAaC,YAAY,CAC7BH,KAAM,QACNI,cAJmB,EAKnBC,SAAU,CACRC,YAAW,SAACC,EAAGC,GACb,OAAQA,EAAOC,YAKNH,EAAgBJ,EAAWQ,QAA3BJ,YAEAJ,IAAkB,Q,kCCT3BS,EAAS,SAAH,GAAqC,IAA/BC,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAAS1B,EAAE,EAAFA,GAAI2B,EAAI,EAAJA,KACjBC,aAAY,SAAC1B,GAAK,OAAKA,EAAMM,SAC9BqB,cACjB,OACE,wBAAQxD,UAAWC,IAAE0B,GAAK2B,KAAMA,EAAMD,QAASA,EAAQ,SACpDD,KAKPD,EAAOM,SAAW,CAChBL,KAAMhD,IAAUsD,OAAOC,WACvBN,QAASjD,IAAUwD,KAAKD,WACxBhC,GAAIvB,IAAUsD,OAAOC,WACrBL,KAAMlD,IAAUsD,OAAOC,YAGVR,QCfA,SAASU,IACtB,MAAwBC,mBAAS,IAAG,mBAA7BtB,EAAI,KAAEuB,EAAO,KACpB,EAA4BD,mBAAS,IAAG,mBAAjCE,EAAM,KAAEC,EAAS,KAClBC,EAAcX,YAAY3B,GAC1BuC,EAAYZ,YAAYrB,GAExBkC,EAAWZ,cAEXa,EAAe,SAACC,GACa,SAA7BA,EAAMC,cAAc/B,MACtBuB,EAAQO,EAAMC,cAAcC,OAEG,WAA7BF,EAAMC,cAAc/B,MACtByB,EAAUK,EAAMC,cAAcC,QAI5BC,EAAe,SAACH,GAEpB,GADAA,EAAMI,iBACFC,EAAUnC,GAGZ,OAFAoC,MAAM,GAAD,OAAIpC,EAAI,iCACbqC,IAGErC,GAAQwB,IACVI,EAAS5C,EAAW,CAAEgB,OAAMwB,YAC5BI,EAAStB,EAAYqB,KAEvBU,KAGIA,EAAQ,WACZd,EAAQ,IACRE,EAAU,KAGNU,EAAY,SAACG,GAAO,OACxBZ,EAAYa,MAAK,YAAO,SAAJvC,OAAoBsC,MAE1C,OAiCE,cAhCA,CAgCA,QAAM9E,UAAWC,IAAE+E,KAAMC,SAAUR,EAAa,UAC9C,wBAAOzE,UAAWC,IAAEiF,MAAM,UACxB,+BAAM,SAEN,uBACElF,UAAWC,IAAEkF,MACb7B,KAAK,OACLd,KAAK,OACLgC,MAAOhC,EACP4C,SAAUf,EACVgB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,OAGZ,wBAAOvF,UAAWC,IAAEiF,MAAM,UACxB,+BAAM,WACN,uBACElF,UAAWC,IAAEkF,MACb7B,KAAK,MACLd,KAAK,SACLgC,MAAOR,EACPoB,SAAUf,EACVgB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,OAGZ,cAAC,EAAM,CACLjC,KAAK,SACL3B,GAAG,SACHyB,KAAK,cACLC,QAASoB,O,qBClEFe,EAvCK,WAClB,IAAM1D,EAAWyB,YAAYnB,GAEvBgC,GADgBb,aAAY,SAAC1B,GAAK,OAAKA,EAAMC,SAAS2D,UAC3CjC,eAajB,OAJAkC,qBAAU,WACRtB,EAASnD,OACR,CAACmD,IAGF,qBAAKpE,UAAWC,IAAE0F,gBAAgB,SAC/B7D,EAAS8D,OAAS,GACjB,oBAAI5F,UAAWC,IAAE4F,YAAY,SAC1B/D,EAASgE,KAAI,gBAAGnE,EAAE,EAAFA,GAAIa,EAAI,EAAJA,KAAMwB,EAAM,EAANA,OAAM,OAC/B,qBAAIhE,UAAWC,IAAE8F,KAAK,UACpB,8BACGvD,EAAK,KAAGwB,KAEX,cAAC,EAAM,CACLZ,KAAK,SACLzB,GAAG,SACH2B,KAAK,SACLD,QAAS,kBAxBgBe,EAAS3C,EAwBHE,SARPA,WCzBlCqE,EAAcrD,YAAY,CAC9BH,KAAM,SACNI,aAJmB,GAKnBC,SAAU,CACRoD,aAAY,SAACpE,EAAOmB,GAClB,OAAOA,EAAOC,YAKLgD,EAAiBD,EAAY9C,QAA7B+C,aAEAD,IAAmB,Q,iBCMnBE,EAfA,WACb,IAAM1B,EAAQjB,YAAYvB,GACpBoC,EAAWZ,cACjB,OACE,qBAAKxD,UAAWC,IAAEgC,OAAO,SACvB,uBACEjC,UAAWC,IAAEkF,MACb7B,KAAK,OACLkB,MAAOA,EACPY,SAAU,SAACe,GAAC,OAAK/B,EAAS6B,EAAaE,EAAEC,OAAO5B,c,iBCLzC6B,EAND,SAAH,GAAwB,IAAlBjD,EAAI,EAAJA,KAAME,EAAI,EAAJA,KACrB,OAAO,oBAAItD,UAAWC,IAAEqD,GAAM,SAAEF,K,oBCUnBkD,GAXC,SAAH,GAA6B,IAAvBhB,EAAK,EAALA,MAAOvF,EAAQ,EAARA,SACxB,OACE,0BAASC,UAAWC,KAAEsG,QAAQ,UAC3BjB,GAAS,oBAAItF,UAAWC,KAAEqF,MAAM,SAAEA,IAClCvF,M,oBCADyG,GAAYC,SAASC,cAAc,eAyC1BC,GAvCD,SAAH,GAAsB,IAAhB5G,EAAQ,EAARA,SACToE,EAAYZ,YAAYrB,GACxB0E,EAAWpD,cACjBkC,qBAAU,WAER,OADAmB,OAAOC,iBAAiB,UAAWC,GAC5B,kBAAMF,OAAOG,oBAAoB,UAAWD,OAGrD,IAMMA,EAAa,SAACE,GACD,WAAbA,EAAIC,MACNN,EAAS9D,EAAYqB,KAIzB,OAAOgD,uBACL,qBAAKnH,UAAWC,KAAEmH,SAAU/D,QAbX,SAAC4D,GACdA,EAAIb,SAAWa,EAAI1C,eACrBqC,EAAS9D,EAAYqB,KAWyB,SAC9C,sBAAKnE,UAAWC,KAAEoH,QAAQ,UACxB,wBACErH,UAAWC,KAAEqH,SACbhE,KAAK,SACLD,QAAS,kBAAMuD,EAAS9D,EAAYqB,KAAY,SACjD,UAGApE,OAGLyG,K,MCCWe,OA7Bf,WACE,IAAMC,EAAajE,YAAYrB,GACzB0E,EAAWpD,cACjB,OACE,cAAC,EAAS,UACR,eAAC,GAAO,WACN,cAAC,EAAK,CAACJ,KAAK,YAAYE,KAAK,UAC7B,cAAC,EAAM,CACLA,KAAK,SACLD,QAAS,kBAAMuD,EAAS9D,EAAY0E,KACpCpE,KAAK,iBACLzB,GAAG,WAEJ6F,GACC,cAAC,GAAK,UACJ,cAAC3D,EAAW,MAIhB,cAAC,EAAK,CAACT,KAAK,wBAAwBE,KAAK,WACzC,cAAC,EAAM,IACP,cAAC,EAAK,CAACF,KAAK,WAAWE,KAAK,WAC5B,cAAC,EAAW,UCwBLmE,GAnDM9E,YAAY,CAC/BH,KAAM,WACNI,aARmB,CACnBb,MAAO,GACP0D,OAAQ,OACRiC,MAAO,MAOPC,cAAa,SAACC,GACZA,EAEGC,QAAQ5G,EAAc6G,SAAS,SAACjG,EAAOmB,GACtCnB,EAAM4D,OAAS,aAEhBoC,QAAQ5G,EAAc8G,WAAW,SAAClG,EAAOmB,GACxCnB,EAAM4D,OAAS,YACf5D,EAAM6F,MAAQ,KAEd7F,EAAME,MAAQF,EAAME,MAAMiG,OAAOhF,EAAOC,YAEzC4E,QAAQ5G,EAAcgH,UAAU,SAACpG,EAAOmB,GACvCnB,EAAM4D,OAAS,SACf5D,EAAM6F,MAAQ1E,EAAO0E,MAAMnG,WAG5BsG,QAAQrG,EAAWsG,SAAS,SAACjG,GAC5BA,EAAM4D,OAAS,aAEhBoC,QAAQrG,EAAWuG,WAAW,SAAClG,EAAOmB,GACrCnB,EAAM4D,OAAS,YACf5D,EAAM6F,MAAQ,KACd7F,EAAME,MAAMmG,KAAKlF,EAAOC,YAEzB4E,QAAQrG,EAAWyG,UAAU,SAACpG,EAAOmB,GACpCnB,EAAM4D,OAAS,SACf5D,EAAM6F,MAAQ1E,EAAO0E,MAAMnG,WAG5BsG,QAAQpG,EAAcqG,SAAS,SAACjG,GAC/BA,EAAM4D,OAAS,aAEhBoC,QAAQpG,EAAcsG,WAAW,SAAClG,EAAM,GAAkB,IAAfoB,EAAO,EAAPA,QAC1CpB,EAAM4D,OAAS,YACf5D,EAAM6F,MAAQ,KAGd7F,EAAME,MAAQF,EAAME,MAAME,QAAO,SAAC8D,GAAI,OAAKA,EAAKpE,KAAOsB,QAExD4E,QAAQpG,EAAcwG,UAAU,SAACpG,EAAOmB,GACvCnB,EAAM4D,OAAS,SACf5D,EAAM6F,MAAQ1E,EAAO0E,MAAMnG,cAKA,QCxDpB4G,eAAe,CAC5BC,QAAS,CACPtG,SAAUuG,GACVpG,OAAQqG,EACRnG,MAAOoG,K,MCDXC,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,IAAQ,CAACC,MAAOA,GAAM,SACrB,cAAC,GAAG,QAGRlC,SAASmC,eAAe,W","file":"static/js/main.266511df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3btSC\",\"label\":\"ContactForm_label__3Lu3t\",\"input\":\"ContactForm_input__ui46E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactsList_contactList__vw0dP\",\"item\":\"ContactsList_item__2giVe\",\"button\":\"ContactsList_button__oeo8m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__l2iOj\",\"content\":\"Modal_content__s9CEy\",\"btnClose\":\"Modal_btnClose__3eiSw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__2TSo_\",\"input\":\"Filter_input__DCqMj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2gkaV\",\"title\":\"Section_title__ukAji\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3oEEn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2fFoS\",\"delete\":\"Button_delete__2vAeO Button_button__2fFoS\",\"create\":\"Button_create__1rh7U Button_button__2fFoS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__2XVR3\",\"first\":\"Title_first__2GjaS Title_title__2XVR3\",\"second\":\"Title_second__1GSgx Title_title__2XVR3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appTitle\":\"App_appTitle__31RVG\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./Container.module.css\";\n\nfunction Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n\nContainer.Propypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import axios from \"axios\";\r\n\r\n// axios.defaults.baseURL = \"http://localhost:3000\";\r\naxios.defaults.baseURL = \"https://61bc6358d8542f00178246fc.mockapi.io\";\r\n\r\nexport const fetchAllContacts = () => {\r\n  return axios.get(\"/contacts\").then((response) => response.data);\r\n};\r\n\r\nexport const addNewContact = (contact) => {\r\n  return axios.post(\"/contacts\", contact).then(({ data }) => data);\r\n};\r\n\r\nexport const deleteContacts = (contactId) => {\r\n  return axios.delete(`/contacts/${contactId}`);\r\n};\r\n\r\nexport const updateContact = (contactId, update) => {\r\n  return axios.patch(`/contacts/${contactId}`, update).then(({ data }) => data);\r\n};\r\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport {\r\n  fetchAllContacts,\r\n  addNewContact,\r\n  deleteContacts,\r\n} from \"../contacts-api\";\r\n\r\nexport const fetchContacts = createAsyncThunk(\r\n  \"contacts/fetchContacts\",\r\n  async (thunkAPI) => {\r\n    try {\r\n      const response = await fetchAllContacts();\r\n      return response;\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const addContact = createAsyncThunk(\r\n  \"contacts/addContact\",\r\n  async (contact, thunkAPI) => {\r\n    try {\r\n      const response = await addNewContact(contact);\r\n      return response;\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const deleteContact = createAsyncThunk(\r\n  \"contacts/deleteContact\",\r\n  async (contactId, thunkAPI) => {\r\n    try {\r\n      const responce = await deleteContacts(contactId);\r\n      return responce.data.id;\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.filter;\r\nexport const getModal = (state) => state.modal;\r\n\r\n// export const getVisibleContacts = (state) => {\r\n//   const allContacts = getContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return allContacts.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n//};\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nconst initialState = false\r\n\r\nconst modalSlice = createSlice({\r\n  name: 'modal',\r\n  initialState,\r\n  reducers: {\r\n    toggleModal(_, action) {\r\n      return !action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { toggleModal } = modalSlice.actions\r\n\r\nexport default modalSlice.reducer\r\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n// import { toggleModal } from '../../redux/modalSlice'\nimport PropTypes from 'prop-types'\nimport s from './Button.module.css'\n\nconst Button = ({ text, onClick, id, type }) => {\n  const showModal = useSelector((state) => state.modal)\n  const disputch = useDispatch()\n  return (\n    <button className={s[id]} type={type} onClick={onClick}>\n      {text}\n    </button>\n  )\n}\n\nButton.ropTypes = {\n  text: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n}\n\nexport default Button\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"../../redux/operations\";\nimport { getContacts, getModal } from \"../../redux/selectors\";\nimport { toggleModal } from \"../../redux/modalSlice\";\nimport s from \"./ContactForm.module.css\";\nimport Button from \"../Button\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const allContacts = useSelector(getContacts);\n  const showModal = useSelector(getModal);\n\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    if (event.currentTarget.name === \"name\") {\n      setName(event.currentTarget.value);\n    }\n    if (event.currentTarget.name === \"number\") {\n      setNumber(event.currentTarget.value);\n    }\n  };\n\n  const hendleSubmit = (event) => {\n    event.preventDefault();\n    if (checkName(name)) {\n      alert(`${name} is alreadi in contacts`);\n      reset();\n      return;\n    }\n    if (name && number) {\n      dispatch(addContact({ name, number }));\n      dispatch(toggleModal(showModal));\n    }\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const checkName = (newName) =>\n    allContacts.find(({ name }) => name === newName);\n\n  return (\n    // <form className={s.contactForm} onSubmit={hendleSubmit}>\n    //   <label className={s.formLabel}>\n    //     Name\n    //     <input\n    //       className={s.formInput}\n    //       type=\"text\"\n    //       name=\"name\"\n    //       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //       title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n    //       required\n    //       value={name}\n    //       onChange={hendleChange}\n    //     />\n    //   </label>\n    //   <label className={s.formLabel}>\n    //     <span>Number</span>\n    //     <input\n    //       className={s.formInput}\n    //       type=\"tel\"\n    //       name=\"number\"\n    //       pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n    //       title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n    //       required\n    //       value={number}\n    //       onChange={hendleChange}\n    //     />\n    //   </label>\n\n    //   <button className={s.formButton} type=\"submit\">\n    //     Add contact\n    //   </button>\n    // </form>\n    <form className={s.form} onSubmit={hendleSubmit}>\n      <label className={s.label}>\n        <span>Name</span>\n\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={s.label}>\n        <span>Number</span>\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <Button\n        type=\"submit\"\n        id=\"create\"\n        text=\"Add contact\"\n        onClick={hendleSubmit}\n      />\n    </form>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact, fetchContacts } from \"../../redux/operations\";\nimport { getVisibleContacts } from \"../../redux/selectors\";\nimport s from \"./ContactsList.module.css\";\nimport Button from \"../Button\";\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const contactStatus = useSelector((state) => state.contacts.status);\n  const dispatch = useDispatch();\n\n  const onDeleteContact = (contactId) => dispatch(deleteContact(contactId));\n\n  //   useEffect(() => {\n  //     if (contactStatus === \"idle\") {\n  //       dispatch(fetchContacts());\n  //     }\n  //   }, [dispatch, contactStatus]);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={s.contactsWrapper}>\n      {contacts.length > 0 && (\n        <ul className={s.contactList}>\n          {contacts.map(({ id, name, number }) => (\n            <li className={s.item} key={id}>\n              <p>\n                {name}: {number}\n              </p>\n              <Button\n                text=\"Delete\"\n                id=\"delete\"\n                type=\"button\"\n                onClick={() => onDeleteContact(id)}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default ContactList;\n","import { createSlice } from '@reduxjs/toolkit'\r\nconst initialState = ''\r\n\r\nconst filterSlice = createSlice({\r\n  name: 'filter',\r\n  initialState,\r\n  reducers: {\r\n    changeFilter(state, action) {\r\n      return action.payload\r\n    },\r\n  },\r\n})\r\n\r\nexport const { changeFilter } = filterSlice.actions\r\n\r\nexport default filterSlice.reducer\r\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeFilter } from \"../../redux/filterSlice\";\nimport { getFilter } from \"../../redux/selectors\";\nimport s from \"./Filter.module.css\";\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <div className={s.filter}>\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={(e) => dispatch(changeFilter(e.target.value))}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./Title.module.css\";\n\nconst Title = ({ text, type }) => {\n  return <h2 className={s[type]}>{text}</h2>;\n};\n\nTitle.propTypes = { text: PropTypes.string, type: PropTypes.string };\n\nexport default Title;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./Section.module.css\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.section}>\n      {title && <h2 className={s.title}>{title}</h2>}\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = { title: PropTypes.string, children: PropTypes.node };\n\nexport default Section;\n","import React, { useEffect } from 'react'\nimport { createPortal } from 'react-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { toggleModal } from '../../redux/modalSlice'\nimport { getModal } from '../../redux/selectors'\nimport PropTypes from 'prop-types'\nimport s from './Modal.module.css'\n\nconst modalRoot = document.querySelector('#modal-root')\n\nconst Modal = ({ children }) => {\n  const showModal = useSelector(getModal)\n  const disputch = useDispatch()\n  useEffect(() => {\n    window.addEventListener('keydown', eskKeyDown)\n    return () => window.removeEventListener('keydown', eskKeyDown)\n  })\n\n  const modalClick = (evt) => {\n    if (evt.target === evt.currentTarget) {\n      disputch(toggleModal(showModal))\n    }\n  }\n\n  const eskKeyDown = (evt) => {\n    if (evt.code === 'Escape') {\n      disputch(toggleModal(showModal))\n    }\n  }\n\n  return createPortal(\n    <div className={s.backdrop} onClick={modalClick}>\n      <div className={s.content}>\n        <button\n          className={s.btnClose}\n          type=\"button\"\n          onClick={() => disputch(toggleModal(showModal))}\n        >\n          Close\n        </button>\n        {children}\n      </div>\n    </div>,\n    modalRoot\n  )\n}\n\nModal.propTypes = { children: PropTypes.node }\n\nexport default Modal\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n// import { ToastContainer } from \"react-toastify\";\nimport Container from \"./components/Container\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactsList\";\nimport Filter from \"./components/Filter/Filter\";\nimport Title from \"./components/Title\";\nimport Button from \"./components/Button\";\nimport Section from \"./components/Section\";\nimport Modal from \"./components/Modal\";\nimport { getModal } from \"./redux/selectors\";\nimport { toggleModal } from \"./redux/modalSlice\";\nimport s from \"./App.module.css\";\n\nfunction App() {\n  const showModall = useSelector(getModal);\n  const disputch = useDispatch();\n  return (\n    <Container>\n      <Section>\n        <Title text=\"Phonebook\" type=\"first\" />\n        <Button\n          type=\"button\"\n          onClick={() => disputch(toggleModal(showModall))}\n          text=\"Create contact\"\n          id=\"create\"\n        />\n        {showModall && (\n          <Modal>\n            <ContactForm />\n          </Modal>\n        )}\n\n        <Title text=\"Find contacts by name\" type=\"second\" />\n        <Filter />\n        <Title text=\"Contacts\" type=\"second\" />\n        <ContactList />\n      </Section>\n      {/* <ToastContainer autoClose={3000} /> */}\n    </Container>\n  );\n}\n\nexport default App;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nimport { fetchContacts, addContact, deleteContact } from \"./operations\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  status: \"idle\",\r\n  error: null,\r\n};\r\n\r\nconst contactSlice = createSlice({\r\n  name: \"contacts\",\r\n  initialState,\r\n\r\n  extraReducers(builder) {\r\n    builder\r\n      //fetch\r\n      .addCase(fetchContacts.pending, (state, action) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(fetchContacts.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.error = null;\r\n        // Add any fetched posts to the array\r\n        state.items = state.items.concat(action.payload);\r\n      })\r\n      .addCase(fetchContacts.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      //add\r\n      .addCase(addContact.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(addContact.fulfilled, (state, action) => {\r\n        state.status = \"succeeded\";\r\n        state.error = null;\r\n        state.items.push(action.payload);\r\n      })\r\n      .addCase(addContact.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      })\r\n      //delete\r\n      .addCase(deleteContact.pending, (state) => {\r\n        state.status = \"loading\";\r\n      })\r\n      .addCase(deleteContact.fulfilled, (state, { payload }) => {\r\n        state.status = \"succeeded\";\r\n        state.error = null;\r\n        // const index = state.items.findIndex((e) => e.id === payload.id);\r\n        // state.items.splice(index, 1);\r\n        state.items = state.items.filter((item) => item.id !== payload);\r\n      })\r\n      .addCase(deleteContact.rejected, (state, action) => {\r\n        state.status = \"failed\";\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default contactSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactReducer from \"./contactsSlice\";\r\nimport filterReducer from \"./filterSlice\";\r\nimport modalReducer from \"./modalSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n    filter: filterReducer,\r\n    modal: modalReducer,\r\n  },\r\n});\r\n\r\n// import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\n// import logger from \"redux-logger\";\r\n// import {\r\n//   persistStore,\r\n//   FLUSH,\r\n//   REHYDRATE,\r\n//   PAUSE,\r\n//   PERSIST,\r\n//   PURGE,\r\n//   REGISTER,\r\n// } from \"redux-persist\";\r\n\r\n// import contactsReducer from \"./contacts/contacts-reducer\";\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = configureStore({\r\n//   reducer: rootReducer,\r\n//   middleware: (getDefaultMiddleware) => [\r\n//     ...getDefaultMiddleware({\r\n//       serializableCheck: {\r\n//         ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n//       },\r\n//     }),\r\n//     logger,\r\n//   ],\r\n//   devTools: process.env.NODE_ENV === \"development\",\r\n// });\r\n\r\n// // const persistor = persistStore(store);\r\n\r\n// export default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}